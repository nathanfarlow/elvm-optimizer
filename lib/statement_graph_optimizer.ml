(* open Core *)

(* let create = Fn.id *)

(* let optimize_until_stable optimize = *)
(*   let rec loop has_changed e = *)
(*     match optimize e with *)
(*     | true -> loop e true *)
(*     | false -> has_changed *)
(*   in *)
(*   loop false *)
(* ;; *)

(* let update_branch node = *)
(*   match Node.branch node with *)
(*   | Some (Node.Branch.Conditional_jump { true_; false_ }) -> *)
(*     (match Statement.branch_type (Node.stmt node) with *)
(*      (\* if a conditional jump statement was simplified to an unconditional *)
(*         jump, then the condition was determined to always be true *\) *)
(*      | Some Unconditional_jump -> *)
(*        (\* delete this node from the false branch's references *\) *)
(*        Node.set_references *)
(*          false_ *)
(*          (List.filter (Node.references false_) ~f:(fun ref -> *)
(*             not (String.equal (Node.label ref.from) (Node.label node)))); *)
(*        (\* correct this node's branch to be unconditional to the true branch *\) *)
(*        Node.set_branch node (Some (Unconditional_jump true_)); *)
(*        true *)
(*      (\* if a conditional jump statement was simplified to a fallthrough, *)
(*         (definitely a nop), then the condition was determined to always be false *\) *)
(*      | Some Fallthrough -> *)
(*        assert (Statement.is_nop @@ Node.stmt node); *)
(*        (\* delete this node from the true branch's references *\) *)
(*        Node.set_references *)
(*          true_ *)
(*          (List.filter (Node.references true_) ~f:(fun ref -> *)
(*             not (String.equal (Node.label ref.from) (Node.label node)))); *)
(*        (\* correct this node's branch to be fallthrough *\) *)
(*        Node.set_branch node (Some (Fallthrough false_)); *)
(*        true *)
(*      | _ -> false) *)
(*   | _ -> false *)
(* ;; *)

(* let rec optimize optimizer graph = optimize_until_stable (optimize' optimizer) graph *)

(* and optimize' optimizer graph = *)
(*   Hashtbl.fold *)
(*     (Graph.nodes graph) *)
(*     ~init:false *)
(*     ~f:(fun ~key:_ ~data:node changed_in_past -> *)
(*       let stmt, did_optimize = Optimizer.optimize optimizer (Node.stmt node) in *)
(*       Node.set_stmt node stmt; *)
(*       let did_update = update_branch node in *)
(*       changed_in_past || did_update || did_optimize) *)
(* ;; *)
